# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
env:
  AWS_REGION: "eu-central-1"

permissions:
  id-token: write   # This is required for requesting the JWT
  contents: read    # This is required for actions/checkout

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4

      # AWS CONFIGURATION for terraform to use
      - name: "Configure AWS Credentials Action for GitHub Actions"
        uses: aws-actions/configure-aws-credentials@v4.0.2
        with:
          role-to-assume: arn:aws:iam::026591336708:role/github-actions-role
          aws-region: ${{ env.AWS_REGION }}

      # Sets up terraform
      - name: HashiCorp - Setup Terraform
        uses: hashicorp/setup-terraform@v3.1.1
        with:
          terraform_version: ">=1.2.0"
          terraform_wrapper: false

      - name: "Prepare ECR repo name based on the Github repository"
        shell: bash
        run: |
          set -eux 
          repo="${GITHUB_REPOSITORY,,}"
          echo "ECR_REPO_NAME=${repo//\//_}" >> $GITHUB_ENV

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          registries: ${{ inputs.aws_account_id }}
          mask-password: "true" # see: https://github.com/aws-actions/amazon-ecr-login#docker-credentials

      - name: "Create AWS ECR repository"
        continue-on-error: true
        run: | 
          aws ecr create-repository --repository-name "$ECR_REPO_NAME"
        env:
          ECR_REPO_NAME: ${{ env.ECR_REPO_NAME }}

      - name: Build, tag, and push image to Amazon ECR
        id: build-publish
        shell: bash
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.ECR_REPO_NAME }}
          DOCKER_BUILD_DIR: "."
          DOCKER_FILE_PATH: "Dockerfile"
          IMAGE_TAG: "test"
        run: |
          docker build \
            --build-arg DB_HOST="$DB_HOST" --build-arg DB_PORT="$DB_PORT" --build-arg 'DB_USERNAME=${{ secrets.DB_USERNAME }}' \
            --build-arg 'DB_PASSWORD=${{ secrets.DB_PASSWORD }}' --build-arg 'DB_NAME=${{ secrets.DB_USERNAME }}' \
            --platform linux/amd64 -f "$DOCKER_FILE_PATH" -t "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" "$DOCKER_BUILD_DIR" \
          docker push "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          echo "IMAGE $IMAGE_TAG is pushed to $ECR_REGISTRY/$ECR_REPOSITORY"
          echo "image_tag=$IMAGE_TAG" 
          echo "FULL_IMAGE=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUTS

      - name: "Terraform init"
        shell: bash
        run: >
            terraform init -input=false
            -backend-config='region=eu-central-1'
            -backend-config='key=${{ env.ECR_REPO_NAME }}.tfstate'
            -backend-config='bucket=${{ secrets.S3_BUCKET_NAME }}'
            -backend-config='dynamodb_table=${{ secrets.DYNAMODB_TF_TABLENAME }}'
            -backend-config='assume_role_policy=arn:aws:iam::026591336708:role/github-actions-role'
            

      - name: "Terraform validate"
        shell: bash
        run: |
          set -eux \
          terraform validate
      

      - name: "Terraform plan"
        shell: bash
        run: >
          terraform plan -out=plan.tfplan
          -var whitelisted_ip=${{ secrets.WHITELISTED_IP }}
          -var db_password=${{ secrets.DB_PASSWORD }}
          -var db_username=${{ secrets.DB_USERNAME }}
          -var ecr_name_repo=${{ env.ECR_REPO_NAME }}

      - name: "Terraform Apply config"
        id: tf_apply
        shell: bash
        run: |
            terraform apply -auto-approve \
              -var 'whitelisted_ip=${{ secrets.WHITELISTED_IP }}' \
              -var 'db_password=${{ secrets.DB_PASSWORD }}' \
              -var 'db_username=${{ secrets.DB_USERNAME }}' \
              -var 'ecr_name_repo=${{ env.ECR_REPO_NAME }}'
            echo "DB_HOST=$(terraform output --raw database_endpoint)" >> "$GITHUB_OUTPUT"
            echo "DB_PORT=$(terraform output --raw database_port)" >> "$GITHUB_OUTPUT"
