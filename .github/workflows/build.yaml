# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  AWS_REGION: "eu-central-1"

permissions:
  id-token: write   # This is required for requesting the JWT
  contents: read    # This is required for actions/checkout

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4

      # AWS CONFIGURATION for terraform to use
      - name: "Configure AWS Credentials Action for GitHub Actions"
        uses: aws-actions/configure-aws-credentials@v4.0.2
        with:
          role-to-assume: arn:aws:iam::026591336708:role/github-actions-role
          aws-region: ${{ env.AWS_REGION }}

      # Sets up terraform
      - name: HashiCorp - Setup Terraform
        uses: hashicorp/setup-terraform@v3.1.1
        with:
          terraform_version: ">=1.2.0"
          terraform_wrapper: false

      - name: "Prepare ECR repo name based on the Github repository"
        shell: bash
        run: |
          set -eux 
          repo="${GITHUB_REPOSITORY,,}"
          echo "ECR_REPO_NAME=${repo//\//_}" >> $GITHUB_ENV

      - run: terraform init
      - id: validate
        run: terraform validate
        continue-on-error: false

      - id: apply
        run: |
            terraform apply --input=false -auto-approve \
            -var whitelisted_ip=${{ secrets.WHITELISTED_IP }} \
            -var db_password=${{ secrets.DB_PASSWORD }} \
            -var db_username=${{ secrets.DB_USERNAME }} \ 
            -var ecr_name=${{ env.ECR_REPO_NAME }}
             && terraform output -raw database_endpoint > database_endpointname
             && terraform output -raw database_port > database_port
        env:
          WHITELISTED_IP: ${{ secrets.WHITELISTED_IP }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_USERNAME: ${{ secrets.DB_USERNAME }}

